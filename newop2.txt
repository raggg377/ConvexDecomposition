n = 8
i =0
i =0
i =1
i =1
i =2
i =2
i =3
i =3
i =4
i =4
i =5
i =5
i =6
i =6
i =7
i =7
exiting for
n = 8
i =0
i =0
i =1
i =1
i =2
i =2
i =3
i =3
i =4
i =4
i =5
i =5
i =6
i =6
i =7
i =7
exiting for
Initial vertices: 
intial edges: 
inside while loop, n is: 8 and m is: 1
size of L is: 1
checking L.back just before v1
969 127
v1 and v2 are: 
969 127
301 280
v[i+1]: 19 624
rest of the contents of L for i: 2
19 624
500 700
650 600
Notch Found
size of L is: 5
450 520
size of LPVS1
1 are we getting here?
v1: 969 127
vo: 450 520
last: 650 600
should be zero: 0
printing vtr: 2
0 500 700
1 650 600
3
checking L.back
19 624
we are now here in 1th iteration
0 969 127
1 301 280
2 19 624
we are here now
0
n = 3
i =0
i =0
i =1
i =1
i =2
i =2
exiting for
checking L.back
19 624
make new dcel 
 vertex 0 : 969, 127
 vertex of inc edge0 : 301 -> 280
 vertex 1 : 301, 280
 vertex of inc edge1 : 19 -> 624
 vertex 2 : 19, 624
 vertex of inc edge2 : 969 -> 127
checking L.back
19 624
size of decomp is: 
checking L.back
19 624
dcel after removal: 
 vertex 0 : 969, 127
 vertex of inc edge0 : 19 -> 624
 vertex 1 : 19, 624
 vertex of inc edge1 : 500 -> 700
 vertex 2 : 500, 700
 vertex of inc edge2 : 650 -> 600
 vertex 3 : 650, 600
 vertex of inc edge3 : 600 -> 700
 vertex 4 : 600, 700
 vertex of inc edge4 : 898 -> 654
 vertex 5 : 898, 654
 vertex of inc edge5 : 450 -> 520
 vertex 6 : 450, 520
 vertex of inc edge6 : 969 -> 127
checking L.back
19 624
intermediate edges: 
origin vertex 0 : 19 , 624
prevedge0 : 969 , 127
nextedge0 : 500 , 700
origin vertex 1 : 500 , 700
prevedge1 : 650 , 600
nextedge1 : 19 , 624
origin vertex 2 : 500 , 700
prevedge2 : 19 , 624
nextedge2 : 650 , 600
origin vertex 3 : 650 , 600
prevedge3 : 600 , 700
nextedge3 : 500 , 700
origin vertex 4 : 650 , 600
prevedge4 : 500 , 700
nextedge4 : 600 , 700
origin vertex 5 : 600 , 700
prevedge5 : 898 , 654
nextedge5 : 650 , 600
origin vertex 6 : 600 , 700
prevedge6 : 650 , 600
nextedge6 : 898 , 654
origin vertex 7 : 898 , 654
prevedge7 : 450 , 520
nextedge7 : 600 , 700
origin vertex 8 : 898 , 654
prevedge8 : 600 , 700
nextedge8 : 450 , 520
origin vertex 9 : 450 , 520
prevedge9 : 969 , 127
nextedge9 : 898 , 654
origin vertex 10 : 450 , 520
prevedge10 : 898 , 654
nextedge10 : 969 , 127
origin vertex 11 : 969 , 127
prevedge11 : 19 , 624
nextedge11 : 450 , 520
origin vertex 12 : 969 , 127
prevedge12 : 450 , 520
nextedge12 : 19 , 624
origin vertex 13 : 19 , 624
prevedge13 : 500 , 700
nextedge13 : 969 , 127
are we decrementing n?8
Iteration: 1
L diag size is3
969 127
301 280
19 624
500 700
650 600
600 700
898 654
450 520
printing L.back19 624
19 624
n after decrement: 7
inside while loop, n is: 7 and m is: 2
size of L is: 3
checking L.back just before v1
19 624
v1 and v2 are: 
19 624
500 700
v[i+1]: 650 600
rest of the contents of L for i: 2
650 600
Notch Found
size of L is: 3
450 520
size of LPVS0
checking L.back
650 600
we are now here in 2th iteration
0 19 624
1 500 700
2 650 600
we are here now
1
n = 3
i =0
i =0
i =1
i =1
i =2
i =2
exiting for
checking L.back
650 600
make new dcel 
 vertex 0 : 19, 624
 vertex of inc edge0 : 500 -> 700
 vertex 1 : 500, 700
 vertex of inc edge1 : 650 -> 600
 vertex 2 : 650, 600
 vertex of inc edge2 : 19 -> 624
checking L.back
650 600
size of decomp is: 
checking L.back
650 600
dcel after removal: 
 vertex 0 : 969, 127
 vertex of inc edge0 : 19 -> 624
 vertex 1 : 19, 624
 vertex of inc edge1 : 650 -> 600
 vertex 2 : 650, 600
 vertex of inc edge2 : 600 -> 700
 vertex 3 : 600, 700
 vertex of inc edge3 : 898 -> 654
 vertex 4 : 898, 654
 vertex of inc edge4 : 450 -> 520
 vertex 5 : 450, 520
 vertex of inc edge5 : 969 -> 127
checking L.back
650 600
intermediate edges: 
origin vertex 0 : 650 , 600
prevedge0 : 19 , 624
nextedge0 : 600 , 700
origin vertex 1 : 600 , 700
prevedge1 : 898 , 654
nextedge1 : 650 , 600
origin vertex 2 : 600 , 700
prevedge2 : 650 , 600
nextedge2 : 898 , 654
origin vertex 3 : 898 , 654
prevedge3 : 450 , 520
nextedge3 : 600 , 700
origin vertex 4 : 898 , 654
prevedge4 : 600 , 700
nextedge4 : 450 , 520
origin vertex 5 : 450 , 520
prevedge5 : 969 , 127
nextedge5 : 898 , 654
origin vertex 6 : 450 , 520
prevedge6 : 898 , 654
nextedge6 : 969 , 127
origin vertex 7 : 969 , 127
prevedge7 : 19 , 624
nextedge7 : 450 , 520
origin vertex 8 : 969 , 127
prevedge8 : 450 , 520
nextedge8 : 19 , 624
origin vertex 9 : 19 , 624
prevedge9 : 650 , 600
nextedge9 : 969 , 127
origin vertex 10 : 19 , 624
prevedge10 : 969 , 127
nextedge10 : 650 , 600
origin vertex 11 : 650 , 600
prevedge11 : 600 , 700
nextedge11 : 19 , 624
are we decrementing n?7
Iteration: 2
L diag size is3
969 127
301 280
19 624
500 700
650 600
600 700
898 654
450 520
printing L.back650 600
650 600
n after decrement: 6
inside while loop, n is: 6 and m is: 3
size of L is: 3
checking L.back just before v1
650 600
v1 and v2 are: 
650 600
600 700
v[i+1]: 898 654
rest of the contents of L for i: 2
898 654
Notch Found
size of L is: 3
450 520
size of LPVS0
checking L.back
898 654
we are now here in 3th iteration
0 650 600
1 600 700
2 898 654
we are here now
2
n = 3
i =0
i =0
i =1
i =1
i =2
i =2
exiting for
checking L.back
898 654
make new dcel 
 vertex 0 : 650, 600
 vertex of inc edge0 : 600 -> 700
 vertex 1 : 600, 700
 vertex of inc edge1 : 898 -> 654
 vertex 2 : 898, 654
 vertex of inc edge2 : 650 -> 600
checking L.back
898 654
size of decomp is: 
checking L.back
898 654
dcel after removal: 
 vertex 0 : 969, 127
 vertex of inc edge0 : 19 -> 624
 vertex 1 : 19, 624
 vertex of inc edge1 : 650 -> 600
 vertex 2 : 650, 600
 vertex of inc edge2 : 898 -> 654
 vertex 3 : 898, 654
 vertex of inc edge3 : 450 -> 520
 vertex 4 : 450, 520
 vertex of inc edge4 : 969 -> 127
checking L.back
898 654
intermediate edges: 
origin vertex 0 : 898 , 654
prevedge0 : 650 , 600
nextedge0 : 450 , 520
origin vertex 1 : 450 , 520
prevedge1 : 969 , 127
nextedge1 : 898 , 654
origin vertex 2 : 450 , 520
prevedge2 : 898 , 654
nextedge2 : 969 , 127
origin vertex 3 : 969 , 127
prevedge3 : 19 , 624
nextedge3 : 450 , 520
origin vertex 4 : 969 , 127
prevedge4 : 450 , 520
nextedge4 : 19 , 624
origin vertex 5 : 19 , 624
prevedge5 : 650 , 600
nextedge5 : 969 , 127
origin vertex 6 : 19 , 624
prevedge6 : 969 , 127
nextedge6 : 650 , 600
origin vertex 7 : 650 , 600
prevedge7 : 898 , 654
nextedge7 : 19 , 624
origin vertex 8 : 650 , 600
prevedge8 : 19 , 624
nextedge8 : 898 , 654
origin vertex 9 : 898 , 654
prevedge9 : 450 , 520
nextedge9 : 650 , 600
are we decrementing n?6
Iteration: 3
L diag size is3
969 127
301 280
19 624
500 700
650 600
600 700
898 654
450 520
printing L.back898 654
898 654
n after decrement: 5
inside while loop, n is: 5 and m is: 4
size of L is: 3
checking L.back just before v1
898 654
v1 and v2 are: 
898 654
450 520
v[i+1]: 969 127
rest of the contents of L for i: 2
Notch Found
size of L is: 2
650 600
size of LPVS1
4 are we getting here?
checking L.back
450 520
inside while loop, n is: 5 and m is: 5
size of L is: 2
checking L.back just before v1
450 520
v1 and v2 are: 
450 520
969 127
v[i+1]: 19 624
rest of the contents of L for i: 2
19 624
Notch Found
size of L is: 3
650 600
size of LPVS1
5 are we getting here?
checking L.back
19 624
we are now here in 5th iteration
0 450 520
1 969 127
2 19 624
we are here now
3
n = 3
i =0
i =0
i =1
i =1
i =2
i =2
exiting for
checking L.back
19 624
make new dcel 
 vertex 0 : 450, 520
 vertex of inc edge0 : 969 -> 127
 vertex 1 : 969, 127
 vertex of inc edge1 : 19 -> 624
 vertex 2 : 19, 624
 vertex of inc edge2 : 450 -> 520
checking L.back
19 624
size of decomp is: 
checking L.back
19 624
dcel after removal: 
 vertex 0 : 19, 624
 vertex of inc edge0 : 650 -> 600
 vertex 1 : 650, 600
 vertex of inc edge1 : 898 -> 654
 vertex 2 : 898, 654
 vertex of inc edge2 : 450 -> 520
 vertex 3 : 450, 520
 vertex of inc edge3 : 19 -> 624
checking L.back
19 624
intermediate edges: 
origin vertex 0 : 898 , 654
prevedge0 : 650 , 600
nextedge0 : 450 , 520
origin vertex 1 : 450 , 520
prevedge1 : 19 , 624
nextedge1 : 898 , 654
origin vertex 2 : 19 , 624
prevedge2 : 450 , 520
nextedge2 : 650 , 600
origin vertex 3 : 650 , 600
prevedge3 : 898 , 654
nextedge3 : 19 , 624
origin vertex 4 : 650 , 600
prevedge4 : 19 , 624
nextedge4 : 898 , 654
origin vertex 5 : 898 , 654
prevedge5 : 450 , 520
nextedge5 : 650 , 600
origin vertex 6 : 450 , 520
prevedge6 : 898 , 654
nextedge6 : 19 , 624
origin vertex 7 : 19 , 624
prevedge7 : 650 , 600
nextedge7 : 450 , 520
are we decrementing n?5
Iteration: 5
L diag size is3
969 127
301 280
19 624
500 700
650 600
600 700
898 654
450 520
printing L.back19 624
19 624
n after decrement: 4
inside while loop, n is: 4 and m is: 6
size of L is: 3
checking L.back just before v1
19 624
v1 and v2 are: 
19 624
650 600
v[i+1]: 898 654
rest of the contents of L for i: 2
Notch Found
size of L is: 2
checking L.back
650 600
inside while loop, n is: 4 and m is: 7
size of L is: 2
checking L.back just before v1
650 600
v1 and v2 are: 
650 600
898 654
v[i+1]: 450 520
rest of the contents of L for i: 2
450 520
Notch Found
size of L is: 3
checking L.back
450 520
we are now here in 7th iteration
0 650 600
1 898 654
2 450 520
we are here now
4
n = 3
i =0
i =0
i =1
i =1
i =2
i =2
exiting for
checking L.back
450 520
make new dcel 
 vertex 0 : 650, 600
 vertex of inc edge0 : 898 -> 654
 vertex 1 : 898, 654
 vertex of inc edge1 : 450 -> 520
 vertex 2 : 450, 520
 vertex of inc edge2 : 650 -> 600
checking L.back
450 520
size of decomp is: 
checking L.back
450 520
dcel after removal: 
 vertex 0 : 19, 624
 vertex of inc edge0 : 650 -> 600
 vertex 1 : 650, 600
 vertex of inc edge1 : 450 -> 520
 vertex 2 : 450, 520
 vertex of inc edge2 : 19 -> 624
checking L.back
450 520
intermediate edges: 
origin vertex 0 : 19 , 624
prevedge0 : 450 , 520
nextedge0 : 650 , 600
origin vertex 1 : 650 , 600
prevedge1 : 450 , 520
nextedge1 : 19 , 624
origin vertex 2 : 450 , 520
prevedge2 : 650 , 600
nextedge2 : 19 , 624
origin vertex 3 : 19 , 624
prevedge3 : 650 , 600
nextedge3 : 450 , 520
origin vertex 4 : 650 , 600
prevedge4 : 19 , 624
nextedge4 : 450 , 520
origin vertex 5 : 450 , 520
prevedge5 : 19 , 624
nextedge5 : 650 , 600
are we decrementing n?4
Iteration: 7
L diag size is3
969 127
301 280
19 624
500 700
650 600
600 700
898 654
450 520
printing L.back450 520
450 520
n after decrement: 3
0 19 624
1 650 600
2 450 520
n = 3
i =0
i =0
i =1
i =1
i =2
i =2
exiting for
decomp size: 6
Diagonals
969 127 | 19 624
19 624 | 650 600
650 600 | 898 654
450 520 | 19 624
650 600 | 450 520
End of file are we here?
